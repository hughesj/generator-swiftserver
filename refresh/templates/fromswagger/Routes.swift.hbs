{{!--
 * Copyright IBM Corporation 2017
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
--}}
import Kitura
import KituraContracts

func initialize{{resource}}Routes(app: App) {
{{#if generateCodable}}
  {{#each codable}}
    {{#ifequal this.method "delete"}}
      {{#if this.codable}}
        {{#ifequal this.variant "all"}}
    func deleteAll_{{this.handlerName}}_Handler(completion: (RequestError?) -> Void ) -> Void {
        completion(nil)
    }
        {{/ifequal}}
        {{#ifequal this.variant "id"}}
    func deleteId_{{this.handlerName}}_Handler(id: Int, completion: (RequestError?) -> Void ) -> Void {
        completion(nil)
    }

        {{/ifequal}}
      {{/if}}
    {{/ifequal}}
    {{#ifequal this.method "get"}}
      {{#if this.codable}}
        {{#ifequal this.variant "all"}}
    func getAll_{{this.handlerName}}_Handler(completion: ([{{this.response}}]?, RequestError?) -> Void ) -> Void {
        completion(nil, nil)
    }
        {{/ifequal}}
        {{#ifequal this.variant "id"}}
    func getId_{{this.handlerName}}_Handler(id: Int, completion: ({{this.response}}?, RequestError?) -> Void ) -> Void {
        completion(nil, nil)
    }
        {{/ifequal}}
        {{#ifequal this.variant "noid"}}
    func getIdNoId_{{this.handlerName}}_Handler(completion: ({{this.response}}?, RequestError?) -> Void ) -> Void {
        completion(nil, nil)
    }

        {{/ifequal}}
      {{/if}}
    {{/ifequal}}
    {{#ifequal this.method "patch"}}
      {{#if this.codable}}
    func patchId_{{this.handlerName}}_Handler(id: Int, patch: {{this.param}}, completion: ({{this.param}}?, RequestError?) -> Void ) -> Void {
        completion(nil, nil)
    }

      {{/if}}
    {{/ifequal}}
    {{#ifequal this.method "post"}}
      {{#if this.codable}}
        {{#ifequal this.variant "noid"}}
    func post_{{this.handlerName}}_Handler(post: {{this.param}}, completion: ({{this.param}}?, RequestError?) -> Void ) -> Void {
        completion(nil, nil)
    }

        {{/ifequal}}
        {{#ifequal this.variant "noid"}}
    func postId_{{this.handlerName}}_Handler(post: {{this.param}}, completion: (Int?, {{this.param}}?, RequestError?) -> Void ) -> Void {
        completion(nil, nil, nil)
    }

        {{/ifequal}}
      {{/if}}
    {{/ifequal}}
    {{#ifequal this.method "put"}}
      {{#if this.codable}}
    func putId_{{this.handlerName}}_Handler(put: {{this.param}}, completion: ({{this.param}}?, RequestError?) -> Void ) -> Void {
        completion(nil, nil)
    }

      {{/if}}
    {{/ifequal}}
  {{/each}}

  {{#each codable}}
{{#if this.codable}}
    {{#ifequal this.method "delete"}}
      {{#ifequal this.variant "all"}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}", handler: deleteAll_{{this.handlerName}}_Handler)
      {{/ifequal}}
      {{#ifequal this.variant "id"}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}", handler: deleteId_{{this.handlerName}}_Handler)
      {{/ifequal}}
    {{/ifequal}}
    {{#ifequal this.method "get"}}
      {{#ifequal this.variant "all"}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}", handler: getAll_{{this.handlerName}}_Handler)
      {{/ifequal}}
      {{#ifequal this.variant "id"}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}", handler: getId_{{this.handlerName}}_Handler)
      {{/ifequal}}
      {{#ifequal this.variant "noid"}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}", handler: getIdNoId_{{this.handlerName}}_Handler)
      {{/ifequal}}
    {{/ifequal}}
    {{#ifequal this.method "patch"}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}", handler: patchId_{{this.handlerName}}_Handler)
    {{/ifequal}}
    {{#ifequal this.method "post"}}
      {{#ifequal this.variant "id"}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}", handler: postId_{{this.handlerName}}_Handler)
      {{/ifequal}}
      {{#ifequal this.variant "noid"}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}", handler: post_{{this.handlerName}}_Handler)
      {{/ifequal}}
    {{/ifequal}}
    {{#ifequal this.method "put"}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}", handler: putId_{{this.handlerName}}_Handler)
    {{/ifequal}}
{{else}}
    // Automatically generated raw route as a codable route could not be generated.
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}") { request, response, next in
        response.send(json: [:])
        next()
    }
    {{#if @last}}
    {{else}}

    {{/if}}
{{/if}}
  {{/each}}
{{else}}
  {{#each raw}}
    app.router.{{this.method}}("{{#if ../basepath}}\(basePath){{/if}}{{this.route}}") { request, response, next in
        response.send(json: [:])
        next()
    }
    {{#if @last}}
    {{else}}

    {{/if}}
  {{/each}}
{{/if}}
}
